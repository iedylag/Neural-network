lines(x,y1,col="blue")
lines(x,y2,col="red")
z = matrix(0,ncol=10,nrow=1000)
for(j in 0:9){
z[,j+1] = ((j/10 < x)&(x <= (j+1)/10))
}
y3 = coef(L4)[1]+coef(L4)[2]*z[,1]+coef(L4)[3]*z[,2]+coef(L4)[4]*z[,3]+coef(L4)[5]*z[,4]+coef(L4)[6]*z[,5]+coef(L4)[7]*z[,6]+coef(L4)[8]*z[,7]+coef(L4)[9]*z[,8]+coef(L4)[10]*z[,9]
lines(x,y3,col="green")  # coś nie działa
library(scatterplot3d)
library(scatterplot3d)
install.packages("scatterplot3d")
library(scatterplot3d)
# Przekształcenie zmiennej kategorycznej Species na numeryczną
df$SpeciesCode <- as.numeric(factor(df$Species))
library(scatterplot3d)
library(faraway)
data(gala)
# Przekształcenie zmiennej kategorycznej Species na numeryczną
df$SpeciesCode <- as.numeric(factor(df$Species))
library(scatterplot3d)
library(faraway)
data(Gala)
# Przekształcenie zmiennej kategorycznej Species na numeryczną
df$SpeciesCode <- as.numeric(factor(df$Species))
library(scatterplot3d)
library(faraway)
data(gala)
# Przekształcenie zmiennej kategorycznej Species na numeryczną
df$SpeciesCode <- as.numeric(factor(df$Species))
df=data(gala)
library(scatterplot3d)
library(faraway)
df=data(gala)
# Przekształcenie zmiennej kategorycznej Species na numeryczną
df$SpeciesCode <- as.numeric(factor(df$Species))
library(scatterplot3d)
library(faraway)
df=data(gala)
# Przekształcenie zmiennej kategorycznej Species na numeryczną
df$SpeciesCode <- as.numeric(factor(df$Species))
library(scatterplot3d)
library(faraway)
data(gala)
# Przekształcenie zmiennej kategorycznej Species na numeryczną
gala$SpeciesCode <- as.numeric(factor(gala$Species))
# Tworzenie wykresu 3-wymiarowego
scatterplot3d(df$SpeciesCode, df$Elevation, df$Nearest,
xlab = "Species", ylab = "Elevation", zlab = "Nearest")
library(scatterplot3d)
library(faraway)
data(gala)
# Przekształcenie zmiennej kategorycznej Species na numeryczną
SpeciesCode <- as.numeric(factor(gala$Species))
# Tworzenie wykresu 3-wymiarowego
scatterplot3d(df$SpeciesCode, df$Elevation, df$Nearest,
xlab = "Species", ylab = "Elevation", zlab = "Nearest")
library(scatterplot3d)
library(faraway)
data(gala)
# Przekształcenie zmiennej kategorycznej Species na numeryczną
SpeciesCode <- as.numeric(factor(gala$Species))
# Tworzenie wykresu 3-wymiarowego
scatterplot3d(SpeciesCode, gala$Elevation, gala$Nearest,
xlab = "Species", ylab = "Elevation", zlab = "Nearest")
library(scatterplot3d)
library(faraway)
data(gala)
# Przekształcenie zmiennej kategorycznej Species na numeryczną
gala$Species <- as.numeric(factor(gala$Species))
# Tworzenie wykresu 3-wymiarowego
scatterplot3d(SpeciesCode, gala$Elevation, gala$Nearest,
xlab = "Species", ylab = "Elevation", zlab = "Nearest")
library(scatterplot3d)
library(faraway)
data(gala)
# Przekształcenie zmiennej kategorycznej Species na numeryczną
gala$Species <- as.numeric(factor(gala$Species))
# Tworzenie wykresu 3-wymiarowego
scatterplot3d(gala$Species, gala$Elevation, gala$Nearest,
xlab = "Species", ylab = "Elevation", zlab = "Nearest")
library(scatterplot3d)
library(faraway)
data(gala)
# Przekształcenie zmiennej kategorycznej Species na numeryczną
gala$Species <- as.numeric(factor(gala$Species))
# Tworzenie wykresu 3-wymiarowego
scatterplot3d(gala$Species, gala$Elevation, gala$Nearest,
xlab = "Species", ylab = "Elevation", zlab = "Nearest")
library(scatterplot3d)
library(faraway)
data(gala)
# Przekształcenie zmiennej kategorycznej Species na numeryczną
gala$Species <- as.numeric(factor(gala$Species))
# Tworzenie wykresu 3-wymiarowego
scatterplot3d(df$Species, df$Elevation, df$Nearest,
xlab = "Species", ylab = "Elevation", zlab = "Nearest")
# Przekształcenie zmiennej kategorycznej Species na numeryczną
df$Species <- as.numeric(factor(df$Species))
# Tworzenie wykresu 3-wymiarowego
scatterplot3d(df$Species, df$Elevation, df$Nearest,
xlab = "Species", ylab = "Elevation", zlab = "Nearest")
library(scatterplot3d)
library(faraway)
data(gala)
# Przekształcenie zmiennej kategorycznej Species na numeryczną
df$Species <- as.numeric(factor(df$Species))
lm1 <- lm(gala$Species ~ gala$Area)
summary(lm1)
#Zad 6
summary(model)
#Zad 6
summary(model)
library(faraway)
data=gala
model <- lm(Species ~ Area + Elevation + Nearest + Scruz + Adjacent, data=data)
residuals <- resid(model)
sum_of_squares <- sum(residuals^2)
model.matrix(model)
# obliczenie liczby stopni swobody
n <- nrow(model.matrix(model1)) #liczebność próby
#Zad 6
summary(model)
library(faraway)
data=gala
model <- lm(Species ~ Area + Elevation + Nearest + Scruz + Adjacent, data=data)
residuals <- resid(model)
sum_of_squares <- sum(residuals^2)
model.matrix(model)
# obliczenie liczby stopni swobody
n <- nrow(model.matrix(model1)) #liczebność próby
library(faraway)
data=gala
model <- lm(Species ~ Area + Elevation + Nearest + Scruz + Adjacent, data=data)
residuals <- resid(model)
sum_of_squares <- sum(residuals^2)
model.matrix(model)
# obliczenie liczby stopni swobody
n <- nrow(model.matrix(model1)) #liczebność próby
# a) Estimate dla Area jest równy beta=-0.023938, przy pvalue=0.2963 > 0.05 zatem nie odrzucamy hipotezy zerowej o tym, ze beta=0
# b) dla Elevation beta=0.319465, przy pvalue=3.82e-06 zatem odrzucamy hipotezę zerową o tym, ze beta = 0.55
t.test(model$coefficients[2], mu = 0.55)
# a) Estimate dla Area jest równy beta=-0.023938, przy pvalue=0.2963 > 0.05 zatem nie odrzucamy hipotezy zerowej o tym, ze beta=0
t.test(model$coefficients[2])
# a) Estimate dla Area jest równy beta=-0.023938, przy pvalue=0.2963 > 0.05 zatem nie odrzucamy hipotezy zerowej o tym, ze beta=0
t.test(summary(model)coefficients[2])
#Zad 6
summary(model)
# a) Estimate dla Area jest równy beta=-0.023938, przy pvalue=0.2963 > 0.05 zatem nie odrzucamy hipotezy zerowej o tym, ze beta=0
summary(model)$coefficients[2]
# a) Estimate dla Area jest równy beta=-0.023938, przy pvalue=0.2963 > 0.05 zatem nie odrzucamy hipotezy zerowej o tym, ze beta=0
summary(model)$coefficients[3]
# a) Estimate dla Area jest równy beta=-0.023938, przy pvalue=0.2963 > 0.05 zatem nie odrzucamy hipotezy zerowej o tym, ze beta=0
t.test(summary(model)$coefficients[3]-0.55)
library(faraway)
data=gala
model <- lm(Species ~ Area + Elevation + Nearest + Scruz + Adjacent, data=data)
residuals <- resid(model)
sum_of_squares <- sum(residuals^2)
model.matrix(model)
# obliczenie liczby stopni swobody
n <- nrow(model.matrix(model1)) #liczebność próby
tval <- (summary(model)$coefficients["Elevation", "Estimate"] - 0.55) / summary(model)$coefficients["Elevation", "Std. Error"]
pval <- 2 * pt(-abs(tval), df = summary(model)$df.residual)
tval <- (summary(model)$coefficients["Elevation", "Estimate"] - 0.55) / summary(model)$coefficients["Elevation", "Std. Error"]
#pval <- 2 * pt(-abs(tval), df = summary(model)$df.residual)
c(summary(model)$coefficients["Elevation", c("Estimate", "Std. Error", "t value")], pval)
library(faraway)
data=gala
model <- lm(Species ~ Area + Elevation + Nearest + Scruz + Adjacent, data=data)
residuals <- resid(model)
sum_of_squares <- sum(residuals^2)
model.matrix(model)
# obliczenie liczby stopni swobody
n <- nrow(model.matrix(model1)) #liczebność próby
library(faraway)
data=gala
model <- lm(Species ~ Area + Elevation + Nearest + Scruz + Adjacent, data=data)
residuals <- resid(model)
sum_of_squares <- sum(residuals^2)
model.matrix(model)
# obliczenie liczby stopni swobody
n <- nrow(model.matrix(model)) #liczebność próby
p <- length(coef(model)) #liczba parametrów modelu
df <- n - p - 1  #liczba stopni swobody
residual_standard_error <- sqrt(sum_of_squares / df)
print(residual_standard_error)
print(summary(model)$sigma)
#Zad 6
#a)
summary(model)
# Estimate dla Area jest równy beta=-0.023938, przy pvalue=0.2963 > 0.05 zatem nie odrzucamy hipotezy zerowej o tym, ze beta=0
#b)
tval <- (summary(model)$coefficients["Elevation", "Estimate"] - 0.55) / summary(model)$coefficients["Elevation", "Std. Error"]
pval <- 2 * pt(-abs(tval), df = summary(model)$df.residual)
#We are going to fit a simple neural network using the neuralnet package and fit a linear model as a comparison.
#The Boston dataset is a collection of data about housing values in the suburbs of Boston. Our goal is to predict the median value of owner-occupied homes (medv) using all the other continuous variables available.
set.seed(500)
library(MASS)
data <- Boston
#First we need to check that no datapoint is missing, otherwise we need to fix the dataset.
apply(data,2,function(x) sum(is.na(x)))
install.packages("neuralnet")
library(ggplot2)
rm(list=ls())
library(ggplot2)
install.packages("ggplot2")
install.packages("rtools")
library(ggplot2)
round(predicted_output$net.result)
install.packages("neuralnet")
plot(nn)
library(neuralnet)
# przygotowanie danych treningowych
input <- data.frame(x1 = c(0, 0, 1, 1), x2 = c(0, 1, 0, 1))
output <- data.frame(y = c(0, 1, 1, 0))
# utworzenie i trenowanie sieci neuronowej
nn <- neuralnet(y ~ x1 + x2, data = cbind(input, output), hidden = 3, act.fct = "logistic")
plot(nn)
# testowanie sieci neuronowej
test_input <- data.frame(x1 = c(0, 0, 1, 1), x2 = c(0, 1, 0, 1))
predicted_output <- compute(nn, test_input)
round(predicted_output$net.result)
setwd("~/GitHub/Neuralnet")
# Wczytanie danych treningowych i testowych w postaci plików CSV
df_train <- read.csv("train.csv", header = TRUE, row.names = 1)
df_test <- read.csv("test.csv", header = TRUE, row.names = 1)
# Przygotowanie danych treningowych
df_train$Survived <- as.numeric(df_train$Survived)
df_train$Pclass <- as.numeric(df_train$Pclass)
df_train$Embarked <- as.factor(df_train$Embarked)
df_train$Ticket <- as.numeric(as.character(df_train$Ticket))
df_train$Cabin <- as.numeric(as.character(df_train$Cabin))
df_train$Sex <- ifelse(df_train$Sex == "male", 1, 0)
df_train$Age[is.na(df_train$Age)] <- median(df_train$Age, na.rm = TRUE)
df_train$Fare[is.na(df_train$Fare)] <- median(df_train$Fare, na.rm = TRUE)
# Przygotowanie danych testowych
df_test$Pclass <- as.numeric(df_test$Pclass)
df_test$Embarked <- as.factor(df_test$Embarked)
df_test$Sex <- ifelse(df_test$Sex == "male", 1, 0)
df_test$Age[is.na(df_test$Age)] <- median(df_test$Age, na.rm = TRUE)
df_test$Fare[is.na(df_test$Fare)] <- median(df_test$Fare, na.rm = TRUE)
# Usunięcie kolumny "Name" z danych wejściowych
df_new_data <- df_test[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare")]
# Budowanie modelu sieci neuronowej
library(neuralnet)
set.seed(1234)
nn <- neuralnet(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare,
data = df_train, hidden = c(5,3), linear.output = FALSE)
# Predykcja dla nowych danych
new_data <- data.frame(Pclass = 1, Sex = "female", Age = 21, SibSp = 2,
Parch = 0, Fare = 7.5)
new_data$Pclass <- as.numeric(new_data$Pclass)
new_data$Sex <- ifelse(new_data$Sex == "male", 1, 0)
new_data$Age[is.na(new_data$Age)] <- median(df_train$Age, na.rm = TRUE)
new_data$Fare[is.na(new_data$Fare)] <- median(df_train$Fare, na.rm = TRUE)
new_data <- as.matrix(new_data) # Convert to numeric matrix
prediction <- round(predict(nn, newdata = new_data), 0)
prediction <- round(predict(nn, newdata = new_data), 0)
prediction <- round(predict(nn, newdata = new_data), 0)
prediction <- round(predict(nn, newdata = new_data), 0)
prediction <- round(predict(nn, newdata = new_data), 0)
prediction <- round(predict(nn, newdata = new_data), 0)
prediction <- round(predict(nn, newdata = new_data), 0)
prediction <- round(predict(nn, newdata = new_data), 0)
prediction <- round(predict(nn, newdata = new_data), 0)
prediction <- round(predict(nn, newdata = new_data), 0)
new_data2 <- as.matrix(new_data) # Convert to numeric matrix
prediction <- round(predict(nn, newdata = new_data2), 0)
new_data <- as.matrix(new_data) # Convert to numeric matrix
prediction <- round(predict(nn, newdata = new_data), 0)
# Usunięcie kolumny "Name" z danych wejściowych
df_new_data <- df_test[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")]
# Budowanie modelu sieci neuronowej
library(neuralnet)
set.seed(1234)
nn <- neuralnet(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = df_train, hidden = c(5,3), linear.output = FALSE)
nn <- neuralnet(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = df_train, hidden = c(5,3), linear.output = FALSE)
str(Embared)
str(Embarked)
str(data$Embarked)
str(data)
df_test$Fare[is.na(df_test$Fare)] <- median(df_test$Fare, na.rm = TRUE)
# Usunięcie kolumny "Name" z danych wejściowych
df_new_data <- df_test[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")]
plot(nn)
# Predykcja dla nowych danych
new_data <- data.frame(Pclass = 1, Sex = "female", Age = 21, SibSp = 2,
Parch = 0, Fare = 7.5, Embarked = "S")
new_data$Pclass <- as.numeric(new_data$Pclass)
new_data$Sex <- ifelse(new_data$Sex == "male", 1, 0)
new_data$Age[is.na(new_data$Age)] <- median(df_train$Age, na.rm = TRUE)
new_data$Fare[is.na(new_data$Fare)] <- median(df_train$Fare, na.rm = TRUE)
new_data <- as.matrix(new_data) # Convert to numeric matrix
prediction <- round(predict(nn, newdata = new_data), 0)
new_data$Embarked <- as.factor(new_data$Embarked)
new_data$Embarked <- as.factor(new_data$Embarked)
df_test$Embarked <- as.factor(df_test$Embarked)
show(df_test)
str(df_test)
# Predykcja dla nowych danych
new_data <- data.frame(Pclass = 1, Sex = "female", Age = 21, SibSp = 2,
Parch = 0, Fare = 7.5, Embarked = 3)
new_data$Pclass <- as.numeric(new_data$Pclass)
new_data$Sex <- ifelse(new_data$Sex == "male", 1, 0)
new_data$Age[is.na(new_data$Age)] <- median(df_train$Age, na.rm = TRUE)
new_data$Fare[is.na(new_data$Fare)] <- median(df_train$Fare, na.rm = TRUE)
new_data <- as.matrix(new_data) # Convert to numeric matrix
prediction <- round(predict(nn, newdata = new_data), 0)
new_data$Embarked <- as.numeric(new_data$Embarked)
new_data$Embarked <- as.numeric(new_data$Embarked)
# Predykcja dla nowych danych
new_data <- data.frame(Pclass = 1, Sex = "female", Age = 21, SibSp = 2,
Parch = 0, Fare = 7.5, Embarked = 3)
new_data$Embarked <- as.numeric(new_data$Embarked)
new_data$Sex <- ifelse(new_data$Sex == "male", 1, 0)
new_data$Age[is.na(new_data$Age)] <- median(df_train$Age, na.rm = TRUE)
new_data$Fare[is.na(new_data$Fare)] <- median(df_train$Fare, na.rm = TRUE)
new_data <- as.matrix(new_data) # Convert to numeric matrix
prediction <- round(predict(nn, newdata = new_data), 0)
str(df_train)
str(new_data)
new_data <- as.matrix(new_data) # Convert to numeric matrix
str(new_data)
rm(list="new_data")
rm(list="new_data2")
# Predykcja dla nowych danych
new_data <- data.frame(Pclass = 1, Sex = "female", Age = 21, SibSp = 2,
Parch = 0, Fare = 7.5, Embarked = 3)
new_data$Pclass <- as.numeric(new_data$Pclass)
new_data$Embarked <- as.numeric(new_data$Embarked)
new_data$Sex <- ifelse(new_data$Sex == "male", 1, 0)
new_data$Age[is.na(new_data$Age)] <- median(df_train$Age, na.rm = TRUE)
new_data$Fare[is.na(new_data$Fare)] <- median(df_train$Fare, na.rm = TRUE)
new_data <- as.matrix(new_data) # Convert to numeric matrix
prediction <- round(predict(nn, newdata = new_data), 0)
# Predykcja dla nowych danych
new_data <- data.frame(Pclass = 1, Sex = "female", Age = 21, SibSp = 2,
Parch = 0, Fare = 7.5, Embarked = 3)
new_data$Pclass <- as.numeric(new_data$Pclass)
new_data$Embarked <- as.numeric(new_data$Embarked)
new_data$Sex <- ifelse(new_data$Sex == "male", 1, 0)
new_data$Age[is.na(new_data$Age)] <- median(df_train$Age, na.rm = TRUE)
new_data$Fare[is.na(new_data$Fare)] <- median(df_train$Fare, na.rm = TRUE)
prediction <- round(predict(nn, newdata = new_data), 0)
new_data <- as.matrix(new_data) # Convert to numeric matrix
prediction <- round(predict(nn, newdata = new_data), 0)
new_data <- as.list(new_data) # Convert to numeric matrix
prediction <- round(predict(nn, newdata = new_data), 0)
View(nn)
View(new_data)
prediction <- round(predict(nn, newdata = new_data$Value), 0)
prediction <- round(predict(nn, newdata = new_data), 0)
prediction <- round(predict(nn, newdata = new_data[,2]), 0)
prediction <- round(predict(nn, newdata = new_data[,3]), 0)
new_data <- as.numeric(new_data) # Convert to numeric matrix
prediction <- round(predict(nn, newdata = new_data), 0)
new_data <- as.matrix(new_data) # Convert to numeric matrix
prediction <- round(predict(nn, newdata = new_data), 0)
# Predykcja dla nowych danych
new_data <- data.frame(Pclass = 1, Sex = "female", Age = 21, SibSp = 2,
Parch = 0, Fare = 7.5, Embarked = 3)
new_data <- as.matrix(new_data) # Convert to numeric matrix
prediction <- round(predict(nn, newdata = new_data), 0)
new_data$Pclass <- as.numeric(new_data$Pclass)
new_data$Embarked <- as.numeric(new_data$Embarked)
new_data$Sex <- ifelse(new_data$Sex == "male", 1, 0)
new_data$Age[is.na(new_data$Age)] <- median(df_train$Age, na.rm = TRUE)
# Predykcja dla nowych danych
new_data <- data.frame(Pclass = 1, Sex = "female", Age = 21, SibSp = 2,
Parch = 0, Fare = 7.5, Embarked = 3)
new_data$Pclass <- as.numeric(new_data$Pclass)
new_data$Embarked <- as.numeric(new_data$Embarked)
new_data$Sex <- ifelse(new_data$Sex == "male", 1, 0)
new_data$Age[is.na(new_data$Age)] <- median(df_train$Age, na.rm = TRUE)
new_data$Fare[is.na(new_data$Fare)] <- median(df_train$Fare, na.rm = TRUE)
new_data <- as.matrix(new_data) # Convert to numeric matrix
prediction <- round(predict(nn, newdata = new_data), 0)
# Predykcja dla nowych danych
new_data <- data.frame(Pclass = 1, Sex = "female", Age = 21.0, SibSp = 2,
Parch = 0, Fare = 7.5, Embarked = 3)
new_data$Pclass <- as.numeric(new_data$Pclass)
new_data$Embarked <- as.numeric(new_data$Embarked)
new_data$Sex <- ifelse(new_data$Sex == "male", 1, 0)
new_data$Age[is.na(new_data$Age)] <- median(df_train$Age, na.rm = TRUE)
new_data$Fare[is.na(new_data$Fare)] <- median(df_train$Fare, na.rm = TRUE)
new_data <- as.matrix(new_data) # Convert to numeric matrix
prediction <- round(predict(nn, newdata = new_data), 0)
# Predykcja dla nowych danych
new_data <- data.frame(Pclass = 1, Sex = "female", Age = L21, SibSp = 2,
Parch = 0, Fare = 7.5, Embarked = 3)
# Predykcja dla nowych danych
new_data <- data.frame(Pclass = 1, Sex = "female", Age = 21L, SibSp = 2,
Parch = 0, Fare = 7.5, Embarked = 3)
new_data$Pclass <- as.numeric(new_data$Pclass)
new_data$Embarked <- as.numeric(new_data$Embarked)
new_data$Sex <- ifelse(new_data$Sex == "male", 1, 0)
new_data$Age[is.na(new_data$Age)] <- median(df_train$Age, na.rm = TRUE)
new_data$Fare[is.na(new_data$Fare)] <- median(df_train$Fare, na.rm = TRUE)
new_data <- as.matrix(new_data) # Convert to numeric matrix
prediction <- round(predict(nn, newdata = new_data), 0)
# Predykcja dla nowych danych
new_data <- data.frame(Pclass = 1, Sex = "female", Age = 21, SibSp = 2,
Parch = 0, Fare = 7.5, Embarked = 3)
new_data$Pclass <- as.numeric(new_data$Pclass)
new_data$Embarked <- as.numeric(new_data$Embarked)
new_data$Sex <- ifelse(new_data$Sex == "male", 1, 0)
new_data$Age[is.na(new_data$Age)] <- median(df_train$Age, na.rm = TRUE)
new_data$Fare[is.na(new_data$Fare)] <- median(df_train$Fare, na.rm = TRUE)
new_data <- as.matrix(new_data) # Convert to numeric matrix
prediction <- round(predict(nn, newdata = new_data), 0)
new_data <- as.complex.matrix(new_data) # Convert to numeric matrix
new_data <- as.matrix(new_data) # Convert to numeric matrix
is.matrix(new_data)
prediction <- round(predict(nn, newdata = new_data), 0)
new_data.matrix # Convert to numeric matrix
data.matrix # Convert to numeric matrix
data.matrix(new_data) # Convert to numeric matrix
prediction <- round(predict(nn, newdata = new_data), 0)
is.matrix(new_data)
# Predykcja dla nowych danych
new_data <- data.frame(Pclass = 1, Sex = "female", Age = 21, SibSp = 2,
Parch = 0, Fare = 7.5, Embarked = 3)
new_data$Pclass <- as.numeric(new_data$Pclass)
new_data$Embarked <- as.numeric(new_data$Embarked)
new_data$Sex <- ifelse(new_data$Sex == "male", 1, 0)
new_data$Age[is.na(new_data$Age)] <- median(df_train$Age, na.rm = TRUE)
new_data$Fare[is.na(new_data$Fare)] <- median(df_train$Fare, na.rm = TRUE)
data.matrix(new_data) # Convert to numeric matrix
is.matrix(new_data)
new_data <- data.matrix(new_data) # Convert to numeric matrix
is.matrix(new_data)
prediction <- round(predict(nn, newdata = new_data), 0)
is.matrix(new_data)
prediction <- round(predict(nn, newdata = new_data), 0)
if (prediction == 0) {
print("Nie przeżył")
} else {
print("Przeżył")
}
new_data
prediction <- round(predict(nn, newdata = new_data), 0)
prediction <- round(predict(nn, newdata = new_data), 0)
str(df_train$Embarked)
str(df_test$Embarked)
df_train$Embarked <- as.numeric(as.factor(df_train$Embarked))
df_test$Embarked <- as.numeric(as.factor(df_test$Embarked))
# Usunięcie kolumny "Name" z danych wejściowych
df_new_data <- df_test[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")]
nn <- neuralnet(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = df_train, hidden = c(5,3), linear.output = FALSE)
# Predykcja dla nowych danych
new_data <- data.frame(Pclass = 1, Sex = "female", Age = 21, SibSp = 2,
Parch = 0, Fare = 7.5, Embarked = 3)
new_data$Pclass <- as.numeric(new_data$Pclass)
new_data$Embarked <- as.numeric(new_data$Embarked)
new_data$Sex <- ifelse(new_data$Sex == "male", 1, 0)
new_data$Age[is.na(new_data$Age)] <- median(df_train$Age, na.rm = TRUE)
new_data$Fare[is.na(new_data$Fare)] <- median(df_train$Fare, na.rm = TRUE)
new_data <- data.matrix(new_data) # Convert to numeric matrix
prediction <- round(predict(nn, newdata = new_data), 0)
# Wczytanie danych treningowych i testowych w postaci plików CSV
df_train <- read.csv("train.csv", header = TRUE, row.names = 1)
df_test <- read.csv("test.csv", header = TRUE, row.names = 1)
# Przygotowanie danych treningowych
df_train$Survived <- as.numeric(df_train$Survived)
df_train$Pclass <- as.numeric(df_train$Pclass)
df_train$Embarked <- as.numeric(as.character(df_train$Embarked))
df_train$Ticket <- as.numeric(as.character(df_train$Ticket))
df_train$Cabin <- as.numeric(as.character(df_train$Cabin))
df_train$Sex <- ifelse(df_train$Sex == "male", 1, 0)
df_train$Age[is.na(df_train$Age)] <- median(df_train$Age, na.rm = TRUE)
df_train$Fare[is.na(df_train$Fare)] <- median(df_train$Fare, na.rm = TRUE)
# Przygotowanie danych testowych
df_test$Pclass <- as.numeric(df_test$Pclass)
df_test$Embarked <- as.numeric(as.character(df_test$Embarked))
df_test$Sex <- ifelse(df_test$Sex == "male", 1, 0)
df_test$Age[is.na(df_test$Age)] <- median(df_test$Age, na.rm = TRUE)
df_test$Fare[is.na(df_test$Fare)] <- median(df_test$Fare, na.rm = TRUE)
# Usunięcie kolumny "Name" z danych wejściowych
df_new_data <- df_test[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")]
# Budowanie modelu sieci neuronowej
library(neuralnet)
set.seed(1234)
nn <- neuralnet(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = df_train, hidden = c(5,3), linear.output = FALSE)
df_train$Embarked[is.na(df_train$Embarked)] <- median(df_train$Embarked, na.rm = TRUE)
# Usunięcie kolumny "Name" z danych wejściowych
df_new_data <- df_test[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")]
nn <- neuralnet(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = df_train, hidden = c(5,3), linear.output = FALSE)
df_train$Embarked
df_new <- df_train[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare")]
nn <- neuralnet(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = df_new, hidden = c(5,3), linear.output = FALSE)
df_new <- df_train[, c("Survived", "Pclass", "Sex", "Age", "SibSp", "Parch", "Fare")]
nn <- neuralnet(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = df_new, hidden = c(5,3), linear.output = FALSE)
nn <- neuralnet(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = df_new, hidden = c(5,3), linear.output = FALSE)
nn <- neuralnet(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare,
data = df_new, hidden = c(5,3), linear.output = FALSE)
# Predykcja dla nowych danych
new_data <- data.frame(Pclass = 1, Sex = "female", Age = 21, SibSp = 2,
Parch = 0, Fare = 7.5)
new_data$Pclass <- as.numeric(new_data$Pclass)
new_data$Sex <- ifelse(new_data$Sex == "male", 1, 0)
new_data$Age[is.na(new_data$Age)] <- median(df_train$Age, na.rm = TRUE)
new_data$Fare[is.na(new_data$Fare)] <- median(df_train$Fare, na.rm = TRUE)
new_data <- data.matrix(new_data) # Convert to numeric matrix
prediction <- round(predict(nn, newdata = new_data), 0)
